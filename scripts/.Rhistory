correct_day<- paste0(db$Yr)
correct_day<-substring(correct_day, nchar(correct_day)-1)
corrected_date <- paste0(correct_year, "-", correct_month, "-", correct_day)
corrected_date<-as.Date(corrected_date,format="%Y-%m-%d")
db$TransactionDate[suspected_errors] <- corrected_date[suspected_errors]
db$Month_Yr <- format(as.Date(db$TransactionDate), "%Y-%m")
Month_Yr_counts <- db[, .N, by = Month_Yr]
skim(db$TransactionDate)
ggplot(Month_Yr_counts, aes(x = Month_Yr, y = N)) +
geom_bar(stat = 'identity', fill = 'blue') +
labs(x = 'Month-Year', y = 'Count') #we check that the data makes more sense and now we see not many outliers, although still some values are very small
ggplot(Month_Yr_counts, aes(x = Month_Yr, y = N)) +
geom_bar(stat = 'identity', fill = 'goldenrod1', color = 'goldenrod3') +
labs(x = 'Month-Year', y = 'Count', title = 'Distribution of Counts Over Time') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  #we check that the data makes more sense and now we see not many outliers, although still some values are very small
ggsave("../views/Count_Dates.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
mice_db <- mice(db, m = 5, method = "pmm", seed = 1234) #we could also try different imputation methods such as cart
db <- complete(mice_db)
skim(db) #we double check and see that there are no missing errors. we would also need to double check that the data has not varied significantly
#Duplicates
dup_ind<-duplicated(db[,c("CustomerID","Amount","TransactionDate")]) #this command will keep the first occurrence
db<-db[!dup_ind,] #we remove those duplicates
write.csv(db,file="../stores/clean_data.csv")
db<- read.csv("../stores/clean_data.csv")
categories<-c("Standard", "Premier", "Suite", "Specialty Suite", "Presidential")
skim(db)
db$TransactionDate <- as.Date(db$TransactionDate, format = "%Y-%m-%d")
db$Month_Yr <- format(db$TransactionDate, "%Y-%m")
db$Month<-format(db$TransactionDate,"%m")
db$Yr<-format(db$TransactionDate,"%Y")
db$ProductCategory <- factor(db$ProductCategory)
#Summary statistics for Amount
sum_stats<-skim(db[,c("TransactionDate","ProductCategory","Amount")])
write.xlsx(stats_tbl, file = "../document/stats_tbls.xlsx")
sum_stats<-skim(db[,c("TransactionDate","ProductCategory","Amount")])
sum_stats<-skim(db[,c("TransactionDate","ProductCategory","Amount")])
stats_tbl<-as.data.frame(sum_stats)
write.xlsx(stats_tbl, file = "../document/stats_tbls.xlsx")
db$ProductCategory <- factor(db$ProductCategory, levels = categories)
two_way_table <- table(cut(db$Amount,
breaks = c(0, 100, 200, 300, 400, 500,600,700),
labels = c("0-100", "100-200", "200-300", "300-400", "400-500","500-600","600-700")),
db$ProductCategory)
print(two_way_table)
write.xlsx(two_way_table, file = "../document/twoway_tbls.xlsx")
ggplot(data = db, mapping = aes(x = Amount)) +
geom_histogram(aes(y = ..density..),
binwidth = 15,
fill = 'bisque',
color = 'bisque4') +
stat_function(fun = dnorm,
args = list(mean = mean(db$Amount),
sd = sd(db$Amount)),
color = 'darkgoldenrod',
size = 1) +
labs(title = "Histogram of Amount Spent with Normal Distribution",
x = "Amount Spent",
y = "Density") +
theme_minimal()
ggsave("../views/Amount2.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
#Trends over time
db$Month_Yr <- factor(db$Month_Yr, levels = sort(unique(db$Month_Yr)))
db$Month_Yr_graph <- as.Date(paste0(db$Month_Yr, "-01"), format = "%Y-%m-%d")
ggplot(data = db, mapping = aes(x = Month_Yr_graph, y = Amount)) +
geom_point(color = 'darkblue') +
geom_smooth(method = 'lm', se = FALSE, color = 'brown4') +  # Add trend line
labs(title = "Scatter Plot of Amount by Month and Year",
x = "Month-Year",
y = "Amount") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")
ggsave("../views/Amount_time.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
categories<-c("Standard", "Premier", "Suite", "Specialty Suite", "Presidential")
db$ProductCategory <- factor(db$ProductCategory, levels = categories) #so it will display in desired order
ggplot(data=db, aes(x=ProductCategory, y=Amount)) +  geom_boxplot(fill='darkred')
ggplot(data=db, aes(x=ProductCategory, y=Amount)) +  geom_boxplot(fill='goldenrod1')
ggsave("../views/Amount_category.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
)
summary(summary_customers)  #we see that the number of transactions go from 1-9.
transaction_thresholds <- c(1, 2, 5, 8, Inf)
transaction_labels <- c("1-2", "3-5", "6-8", "9+")
amount_thresholds <- c(0, 999, 2499, 4999, Inf)
# Create summary table with categorized variables
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
) %>%
mutate(
# Assign transaction categories with the extra label for a single transaction
transaction_cat = cut(
NumberOfTransactions,
breaks = transaction_thresholds,
labels = transaction_labels,
include.lowest = TRUE
),
# Assign amount categories
amount_cat = cut(
TotalAmount,
breaks = amount_thresholds,
labels = c("$0-$999", "$1000-$2499", "$2500-$4999", "$5000+"),
include.lowest = TRUE
),
# Use case_when to combine the two categories into a final category
final_category = case_when(
NumberOfTransactions >= 9 | TotalAmount >= 5000 ~ "Platinum",
NumberOfTransactions >= 6 | TotalAmount >= 2500 ~ "Gold",
NumberOfTransactions >= 2 | TotalAmount >= 1000 ~ "Silver",
TRUE ~ "Bronze"  # Default to Bronze if none of the above conditions are met
)
)
# Check the final result
print(summary_customers)
#summary for categories
category_summary <- summary_customers %>%
group_by(final_category) %>%
summarize(
mean_transactions = mean(NumberOfTransactions, na.rm = TRUE),
mean_amount_spent = mean(TotalAmount, na.rm = TRUE)
)
print(category_summary)
summary_customers <- summary_customers %>%
mutate(final_category = factor(final_category, levels = c("Bronze", "Silver", "Gold", "Platinum")))
ggplot(summary_customers, aes(x = final_category, y = NumberOfTransactions, fill = final_category)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.color = "darkblue", outlier.shape = 16) +
theme_minimal() +
labs(title = "Distribution of Number of Transactions by Category",
x = "Category",
y = "Number of Transactions") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position = "none")
# Exploratory Data Analysis (EDA) -----------------------------------------
db<- read.csv("../stores/clean_data.csv")
categories<-c("Standard", "Premier", "Suite", "Specialty Suite", "Presidential")
skim(db)
db$TransactionDate <- as.Date(db$TransactionDate, format = "%Y-%m-%d")
db$Month_Yr <- format(db$TransactionDate, "%Y-%m")
db$Month<-format(db$TransactionDate,"%m")
db$Yr<-format(db$TransactionDate,"%Y")
db$ProductCategory <- factor(db$ProductCategory)
#Summary statistics for Amount
sum_stats<-skim(db[,c("TransactionDate","ProductCategory","Amount")])
stats_tbl<-as.data.frame(sum_stats)
write.xlsx(stats_tbl, file = "../document/stats_tbls.xlsx")
db$ProductCategory <- factor(db$ProductCategory, levels = categories)
two_way_table <- table(cut(db$Amount,
breaks = c(0, 100, 200, 300, 400, 500,600,700),
labels = c("0-100", "100-200", "200-300", "300-400", "400-500","500-600","600-700")),
db$ProductCategory)
print(two_way_table)
write.xlsx(two_way_table, file = "../document/twoway_tbls.xlsx")
ggplot(data = db, mapping = aes(x = Amount)) +
geom_histogram(aes(y = ..density..),
binwidth = 15,
fill = 'bisque',
color = 'bisque4') +
stat_function(fun = dnorm,
args = list(mean = mean(db$Amount),
sd = sd(db$Amount)),
color = 'darkgoldenrod',
size = 1) +
labs(title = "Histogram of Amount Spent with Normal Distribution",
x = "Amount Spent",
y = "Density") +
theme_minimal()
ggsave("../views/Amount2.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
#Trends over time
db$Month_Yr <- factor(db$Month_Yr, levels = sort(unique(db$Month_Yr)))
db$Month_Yr_graph <- as.Date(paste0(db$Month_Yr, "-01"), format = "%Y-%m-%d")
ggplot(data = db, mapping = aes(x = Month_Yr_graph, y = Amount)) +
geom_point(color = 'darkblue') +
geom_smooth(method = 'lm', se = FALSE, color = 'brown4') +  # Add trend line
labs(title = "Scatter Plot of Amount by Month and Year",
x = "Month-Year",
y = "Amount") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")
ggsave("../views/Amount_time.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
categories<-c("Standard", "Premier", "Suite", "Specialty Suite", "Presidential")
db$ProductCategory <- factor(db$ProductCategory, levels = categories) #so it will display in desired order
ggplot(data=db, aes(x=ProductCategory, y=Amount)) +  geom_boxplot(fill='goldenrod1')
ggsave("../views/Amount_category.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
)
summary(summary_customers)  #we see that the number of transactions go from 1-9.
transaction_thresholds <- c(1, 2, 5, 8, Inf)
transaction_labels <- c("1-2", "3-5", "6-8", "9+")
amount_thresholds <- c(0, 999, 2499, 4999, Inf)
# Create summary table with categorized variables
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
) %>%
mutate(
# Assign transaction categories with the extra label for a single transaction
transaction_cat = cut(
NumberOfTransactions,
breaks = transaction_thresholds,
labels = transaction_labels,
include.lowest = TRUE
),
# Assign amount categories
amount_cat = cut(
TotalAmount,
breaks = amount_thresholds,
labels = c("$0-$999", "$1000-$2499", "$2500-$4999", "$5000+"),
include.lowest = TRUE
),
# Use case_when to combine the two categories into a final category
final_category = case_when(
NumberOfTransactions >= 9 | TotalAmount >= 5000 ~ "Platinum",
NumberOfTransactions >= 6 | TotalAmount >= 2500 ~ "Gold",
NumberOfTransactions >= 2 | TotalAmount >= 1000 ~ "Silver",
TRUE ~ "Bronze"  # Default to Bronze if none of the above conditions are met
)
)
# Check the final result
print(summary_customers)
#summary for categories
category_summary <- summary_customers %>%
group_by(final_category) %>%
summarize(
mean_transactions = mean(NumberOfTransactions, na.rm = TRUE),
mean_amount_spent = mean(TotalAmount, na.rm = TRUE)
)
print(category_summary)
summary_customers <- summary_customers %>%
mutate(final_category = factor(final_category, levels = c("Bronze", "Silver", "Gold", "Platinum")))
ggplot(summary_customers, aes(x = final_category, y = NumberOfTransactions, fill = final_category)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.color = "darkblue", outlier.shape = 16) +
theme_minimal() +
labs(title = "Distribution of Number of Transactions by Category",
x = "Category",
y = "Number of Transactions") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position = "none")
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
)
summary(summary_customers)  #we see that the number of transactions go from 1-9.
transaction_thresholds <- c(1, 2, 5, 8, Inf)
transaction_labels <- c("1-2", "3-5", "6-8", "9+")
amount_thresholds <- c(0, 999, 2499, 4999, Inf)
# Create summary table with categorized variables
summary_customers <- db %>%
group_by(CustomerID) %>%
summarize(
NumberOfTransactions = n(),
TotalAmount = sum(Amount, na.rm = TRUE),
MedianAmount = median(Amount, na.rm = TRUE)
) %>%
mutate(
# Assign transaction categories with the extra label for a single transaction
transaction_cat = cut(
NumberOfTransactions,
breaks = transaction_thresholds,
labels = transaction_labels,
include.lowest = TRUE
),
# Assign amount categories
amount_cat = cut(
TotalAmount,
breaks = amount_thresholds,
labels = c("$0-$999", "$1000-$2499", "$2500-$4999", "$5000+"),
include.lowest = TRUE
),
# Use case_when to combine the two categories into a final category
final_category = case_when(
NumberOfTransactions >= 9 | TotalAmount >= 5000 ~ "Platinum",
NumberOfTransactions >= 6 | TotalAmount >= 2500 ~ "Gold",
NumberOfTransactions >= 2 | TotalAmount >= 1000 ~ "Silver",
TRUE ~ "Bronze"  # Default to Bronze if none of the above conditions are met
)
)
# Check the final result
print(summary_customers)
#summary for categories
category_summary <- summary_customers %>%
group_by(final_category) %>%
summarize(
mean_transactions = mean(NumberOfTransactions, na.rm = TRUE),
mean_amount_spent = mean(TotalAmount, na.rm = TRUE)
)
print(category_summary)
summary_customers <- summary_customers %>%
mutate(final_category = factor(final_category, levels = c("Bronze", "Silver", "Gold", "Platinum")))
ggplot(summary_customers, aes(x = final_category, y = NumberOfTransactions, fill = final_category)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.color = "darkblue", outlier.shape = 16) +
theme_minimal() +
labs(title = "Distribution of Number of Transactions by Category",
x = "Category",
y = "Number of Transactions") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position = "none")
ggsave("../views/Category_Transaction.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
ggplot(summary_customers, aes(x = TotalAmount)) +
geom_histogram(binwidth = 50, fill = "lightblue", color = "black") +
facet_wrap(~ final_category) +
theme_minimal() +
labs(title = "Histograms of Amount Spent by Category",
x = "Amount Spent ($)",
y = "Frequency") +
theme(strip.text = element_text(size = 12))
ggsave("../views/Spent_Cat.png", plot = last_plot(), width = 8, height = 6, dpi = 300)
ggplot(data = db, mapping = aes(x = Month_Yr_graph, y = Amount)) +
geom_point(color = 'darkblue') +
geom_smooth(method = 'lm', se = FALSE, color = 'brown4') +  # Add trend line
labs(title = "Scatter Plot of Amount by Month and Year",
x = "Month-Year",
y = "Amount") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months")
ggplot(summary_customers, aes(x = final_category, y = NumberOfTransactions, fill = final_category)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, outlier.color = "darkblue", outlier.shape = 16) +
theme_minimal() +
labs(title = "Distribution of Number of Transactions by Category",
x = "Category",
y = "Number of Transactions") +
scale_fill_brewer(palette = "Set3") +
theme(legend.position = "none")
db$ProductCategory <- factor(db$ProductCategory, levels = categories) #so it will display in desired order
ggplot(data=db, aes(x=ProductCategory, y=Amount)) +  geom_boxplot(fill='goldenrod1')
ks_test_results <- db %>%
group_by(ProductCategory) %>%
summarise(
ks_test = list(ks.test(Amount, "pnorm", mean = mean(Amount), sd = sd(Amount))),
p_value = sapply(ks_test, function(x) x$p.value)
)
print(ks_test_results)
#We will use the Mann-Whitney test
group_Standard <- db %>% filter(ProductCategory == "Standard") %>% pull(Amount)
group_Suite <- db %>% filter(ProductCategory == "Suite") %>% pull(Amount)
# Perform Mann-Whitney U test
mann_whitney_result <- wilcox.test(group_Standard, group_Suite)
# Print the result
print(mann_whitney_result)
#We will copy the customer category in the main db
summary_customers$HighValue <- ifelse(summary_customers$TotalAmount > 1500, 1, 0)
summary_customers$HighValue <- as.factor(summary_customers$HighValue)
cat<-summary_customers[,c("CustomerID","final_category","HighValue")]
db <- merge(db, cat, by = "CustomerID", all.x = TRUE)
#train-test
#30%test, 70% train
set.seed(1234)
id_train<-sample (1:nrow(db),size=0.7*nrow(db), replace=F)
train<-db[id_train,]
test<-db[-id_train,]
skim(train) #we need to double check that HighValue is set as a factor variable
train$HighValue <- factor(train$HighValue, levels = c("0", "1"), labels = c("No", "Yes"))
#Sava data as csv
write.csv(db,file="predictive_models_data.csv")
#Sava data as csv
write.csv(db,file="../stores/predictive_models_data.csv")
write.csv(test,file="../stores/test.csv")
write.csv(train,file="../stores/train.csv")
# TRAIN CONTROL -----------------------------------------------------------
db<- read.csv("../stores/predictive_models_data.csv")
test<-read.csv("../stores/test.csv")
train<-read.csv("../stores/train.csv")
ctrl<- trainControl(method = "cv", #cross validation
number = 10, #we will split data in 10
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
# LOGIT 1 -------------------------------------------------------------------
set.seed(1234)
logit1 <- train(HighValue~Amount+ProductCategory+final_category, #formula, we could have broken down categorical variables into dummies and chose to keep all or subsection
data = train,
metric="Accuracy",
method = "glmnet", #logistic regression with elastic net regularization
trControl = ctrl,
family= "binomial"
)
logit1 #once we run this model, we see an initial value for alpha and lambda that we can use in the tune grid to improve the performance of the model
#This shows it in a graphic manner
plot(logit1$results$lambda,
logit1$results$Accuracy,
xlab="lambda",
ylab="Accuracy")
predictTest_logit1 <- data.frame(
obs = train$HighValue,                    ## observed class labels
predict(logit1, newdata = train, type = "prob"),   ## predicted class probabilities
pred = predict(logit1, newdata = train, type = "raw")    ## predicted class labels
)
head(predictTest_logit1)
predictTest_logit1$obs <- factor(predictTest_logit1$obs, levels = c("No", "Yes"))
confusionMatrix(data = predictTest_logit1$pred, reference=predictTest_logit1$obs)
set.seed(1234)
logit2 <- train(HighValue~Amount+ProductCategory+final_category, #formula, we could have broken down categorical variables into dummies and chose to keep all or subsection
data = train,
metric="Accuracy",
method = "glmnet", #logistic regression with elastic net regularization
trControl = ctrl,
tuneGrid = hyperparameter_grid,
family= "binomial"
)
#hyperparameters.
hyperparameter_grid <- expand.grid(alpha = seq(0, 0.15, 0.01), # iremos variando los valores
lambda = seq(0.03, 0.04, 0.001)) # iremos variando los valores
colnames(hyperparameter_grid) <- c("alpha", "lambda")
set.seed(1234)
logit2 <- train(HighValue~Amount+ProductCategory+final_category, #formula, we could have broken down categorical variables into dummies and chose to keep all or subsection
data = train,
metric="Accuracy",
method = "glmnet", #logistic regression with elastic net regularization
trControl = ctrl,
tuneGrid = hyperparameter_grid,
family= "binomial"
)
logit2 #once we run this model, we see an initial value for alpha and lambda that we can use in the tune grid to improve the performance of the model
#Tuning our grid didn't help improve our model's accuracy
plot(logit2$results$lambda,
logit2$results$Accuracy,
xlab="lambda",
ylab="Accuracy")
predictTest_logit2 <- data.frame(
obs = train$HighValue,                    ## observed class labels
predict(logit2, newdata=train, type = "prob"),         ## predicted class probabilities
pred = predict(logit2, newdata=train, type = "raw")    ## predicted class labels (esto luego lo sacamos porque vamos a variar el corte)
)
head(predictTest_logit2)
predictTest_logit2$obs <- factor(predictTest_logit2$obs, levels = c("No", "Yes"))
confusionMatrix(data = predictTest_logit2$pred, reference=predictTest_logit2$obs)
#Creating a new cut
roc_data <- roc(predictTest_logit2$obs, predictTest_logit2$Yes)
plot(roc_data, main = "ROC Curve", col = "purple", lwd = 2) #this shows our ROC curve. We are high in sensitivity and low in specificity.
mycoords <- coords(roc_data, "all")
#to see what the best cutoff would be if we want a balance between sensitivity and specificity
plot(mycoords$threshold, mycoords$sensitivity, type = "l", col = "red",
xlab = "Cutoff", ylab = "Sensitivity", main = "Sensitivity vs. Cutoff")
lines(mycoords$threshold, mycoords$specificity, col = "blue")
legend("bottomright", legend = c("Sensitivity", "Specificity"), col = c("red", "blue"), lwd = 2)
#New Matrix
predicted_probabilities <- predictTest_logit2$Yes
new_cutoff<-0.18
predictTest_logit2$new_thres <- factor(ifelse(predicted_probabilities > new_cutoff, "Yes", "No"))
confusionMatrix(data = predictTest_logit2$new_thres, reference=predictTest_logit2$obs)
test$logit1<- predict(logit1, newdata=test)
test$HighValue <- factor(test$HighValue, levels = c("0", "1"), labels = c("No", "Yes"))
confusionMatrix(data = test$logit1, reference = test$HighValue)
#Remember in our train model we selected a cutoff of 0.18
test$logit2_prob <- predict(logit2, newdata = test, type = "prob")
test$logit2 <-factor(ifelse(test$logit2_prob$Yes > new_cutoff, "Yes", "No"),  levels = c("No", "Yes"))
#test$logit2 <- factor(test$logit2, levels = c("No", "Yes"), labels = c("0", "1"))
confusionMatrix(data = test$logit2, reference = test$HighValue)
ctrl3<- trainControl(method = "cv",
number = 5,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
set.seed(1234)
class_forest <- train(
HighValue~Amount+ProductCategory+final_category,
data=train,
method = "ranger",
trControl = ctrl3,
tuneGrid=expand.grid(
mtry = c(1,2,3,4,5,6,7,8), #cualquier subconjunto es bagging
splitrule = "gini", #parta el arbol a traves de gini
min.node.size = c(15,30,45,60)) #controlamos la profundidad del arbol por el numero de obs minimo
)
class_forest
predictTest_forest <- data.frame(
obs = test$HighValue,                                    ## observed class labels
predict(class_forest, newdata = test, type = "prob"),         ## predicted class probabilities
pred = predict(class_forest, newdata = test, type = "raw")    ## predicted class labels
)
# Accuracy
mean(predictTest_forest$obs==predictTest_forest$pred)
ctrl2<- trainControl(method = "cv",
number = 10,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
set.seed(1234)
train$HighValue <- factor(train$HighValue, levels = c("No", "Yes"), labels = c("0", "1"))
train$ProductCategory <- as.factor(train$ProductCategory)
train$final_category <- as.factor(train$final_category)
train <- subset(train, select = -c(X, X.1, X.2))
class_tree <- train(HighValue~Amount+ProductCategory+final_category+Yr,
data = train,
method = "rpart", #trees
trControl = ctrl2,
tuneLength=100) #100 alphas
